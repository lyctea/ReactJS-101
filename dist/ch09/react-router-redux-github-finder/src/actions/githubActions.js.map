{"version":3,"sources":["../../../../../ch09/react-router-redux-github-finder/src/actions/githubActions.js"],"names":["getGithub","userId","dispatch","type","fetch","then","response","json","payload","data","catch","changeUserId","text"],"mappings":";;;;;;;AACA;;AAEA;;AAYA;;AAKA;;;;;;;;AAlBA;AA+BO,IAAMA,gCAAY,SAAZA,SAAY,GAAyB;AAAA,MAAxBC,MAAwB,uEAAf,UAAe;;AAChD,SAAO,UAACC,QAAD,EAAc;AACnBA,aAAS,EAAEC,sCAAF,EAAT;AACAD,aAAS,6BAAT;AACAE,UAAM,kCAAkCH,MAAxC,EACGI,IADH,CACQ,UAASC,QAAT,EAAmB;AAAE,aAAOA,SAASC,IAAT,EAAP;AAAwB,KADrD,EAEGF,IAFH,CAEQ,UAASE,IAAT,EAAe;AACnBL,eAAS,EAAEC,qCAAF,EAA4BK,SAAS,EAAEC,MAAMF,IAAR,EAArC,EAAT;AACAL,eAAS,6BAAT;AACD,KALH,EAMGQ,KANH,CAMS,UAASJ,QAAT,EAAmB;AAAEJ,eAAS,EAAEC,kCAAF,EAAT;AAAqC,KANnE;AAOD,GAVD;AAWD,CAZM;;AAcP;;AAtCA;AACA;AACA;;;AAGA;AAdA;AAgDO,IAAMQ,sCAAe,SAAfA,YAAe,CAACC,IAAD;AAAA,SAAW,EAAET,gCAAF,EAAuBK,SAAS,EAAEP,QAAQW,IAAV,EAAhC,EAAX;AAAA,CAArB","file":"githubActions.js","sourcesContent":["//这边引入了 fetch 的 polyfill，兼容旧的浏览器也可以使用 fetch\nimport 'whatwg-fetch';\n//引入 actionTypes 常数\nimport {\n  GET_GITHUB_INITIATE,\n  GET_GITHUB_SUCCESS,\n  GET_GITHUB_FAIL,\n  CHAGE_USER_ID,\n} from '../constants/actionTypes';\n//现在我们来规划我们的 actions 的部份，这个范例我们使用到了 `redux-thunk`\n// 来处理非同步的 action（若读者对于新的 Ajax 处理方式 fetch() 不熟悉可以先\n// [参考这个文件](https://developer.mozilla.org/zh-TW/docs/Web/API/GlobalFetch/fetch)）\n\n\n// 引入 uiActions 的 action\nimport {\n  showSpinner,\n  hideSpinner,\n} from './uiActions';\n\n/* 这边是这个范例的重点，要学习我们之前尚未讲解的非同步 action 处理方式：不同于一般同步 action\n直接发送 action，非同步 action 会回传一个带有 dispatch 参数的 function，里面使用了 Ajax\n（这里使用 fetch()）进行处理\n\n 一般和 API 互动的流程：INIT（开始请求/秀出 spinner）-> COMPLETE（完成请求/隐藏 spinner）-> ERROR（请求失败）\n 这次我们虽然没有使用 redux-actions 但我们还是维持标准 Flux Standard Action 格式：{ type: '', payload: {} }\n */\n\n\n\n\n\n\nexport const getGithub = (userId = 'torvalds') => {\n  return (dispatch) => {\n    dispatch({ type: GET_GITHUB_INITIATE });\n    dispatch(showSpinner());\n    fetch('https://api.github.com/users/' + userId)\n      .then(function(response) { return response.json() })\n      .then(function(json) { \n        dispatch({ type: GET_GITHUB_SUCCESS, payload: { data: json } });\n        dispatch(hideSpinner());\n      })\n      .catch(function(response) { dispatch({ type: GET_GITHUB_FAIL }) });\n  } \n}\n\n// 同步 actions 处理，回传 action 物件\nexport const changeUserId = (text) => ({ type: CHAGE_USER_ID, payload: { userId: text } });"]}